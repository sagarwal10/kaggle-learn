import pandas as pd

# Load data

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import Imputer
iowa_data = pd.read_csv('../input/train.csv')
iowa_data.columns

iowa_target = iowa_data.SalePrice
iowa_predictors = iowa_data.drop(['SalePrice'], axis=1)
iowa_predictors.columns[iowa_predictors.isnull().any()]
print('Columns with missing data')
null_columns=iowa_predictors.columns[iowa_predictors.isnull().any()]
print(null_columns)
# For the sake of keeping the example simple, we'll use only numeric predictors. 
iowa_numeric_predictors = iowa_predictors.select_dtypes(exclude=['object'])

print('Columns with missing data')
null_columns=iowa_numeric_predictors.columns[iowa_numeric_predictors.isnull().any()]
print(null_columns)
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(iowa_numeric_predictors, 
                                                    iowa_target,
                                                    train_size=0.7, 
                                                    test_size=0.3, 
                                                    random_state=0)

def score_dataset(X_train, X_test, y_train, y_test):
    model = RandomForestRegressor(random_state=1)
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    return mean_absolute_error(y_test, preds)

cols_with_missing = [col for col in X_train.columns 
                                 if X_train[col].isnull().any()]
reduced_X_train = X_train.drop(cols_with_missing, axis=1)
reduced_X_test  = X_test.drop(cols_with_missing, axis=1)
print("Mean Absolute Error from dropping columns with Missing Values:")
print(score_dataset(reduced_X_train, reduced_X_test, y_train, y_test))


my_imputer = Imputer()
imputed_X_train = my_imputer.fit_transform(X_train)
imputed_X_test = my_imputer.transform(X_test)
print("Mean Absolute Error from Imputation:")
print(score_dataset(imputed_X_train, imputed_X_test, y_train, y_test))

imputed_X_train_plus = X_train.copy()
imputed_X_test_plus = X_test.copy()

cols_with_missing = (col for col in X_train.columns 
                                 if X_train[col].isnull().any())
for col in cols_with_missing:
    imputed_X_train_plus[col + '_was_missing'] = imputed_X_train_plus[col].isnull()
    imputed_X_test_plus[col + '_was_missing'] = imputed_X_test_plus[col].isnull()

# print('imputed columns')
copy_imputed_X_train_plus = imputed_X_train_plus
imputed_X_train_plus.info()
# Imputation
my_imputer = Imputer()
imputed_X_train_plus = my_imputer.fit_transform(imputed_X_train_plus)
imputed_X_test_plus = my_imputer.transform(imputed_X_test_plus)
print("Mean Absolute Error from Imputation while Track What Was Imputed:")
print(score_dataset(imputed_X_train_plus, imputed_X_test_plus, y_train, y_test))

imputed_track_model = RandomForestRegressor(random_state=1)
imputed_track_model.fit(imputed_X_train_plus, y_train)
preds = imputed_track_model.predict(imputed_X_test_plus)
print("Final model error:");
print(mean_absolute_error(y_test, preds))
# path to file you will use for predictions
test_data_path = '../input/test.csv'

# read test data file using pandas
test_data = pd.read_csv(test_data_path)
test_numeric_predictors = test_data.select_dtypes(exclude=['object'])


cols_with_missing = (col for col in test_numeric_predictors.columns 
                                 if test_numeric_predictors[col].isnull().any())
for col in cols_with_missing:
    test_numeric_predictors[col + '_was_missing'] = test_numeric_predictors[col].isnull()
a,test_numeric_predictors = copy_imputed_X_train_plus.align(test_numeric_predictors, join="left", axis=1)
print('test numeric columns')
test_numeric_predictors.info()
# print('a info')
# a.info()
# Imputation
# my_imputer = Imputer()
test_numeric_predictors = my_imputer.transform(test_numeric_predictors)

test_preds = imputed_track_model.predict(test_numeric_predictors)
print(len(test_preds))
print(test_data)
# The lines below shows you how to save your data in the format needed to score it in the competition
output = pd.DataFrame({'Id': test_data.Id,
                       'SalePrice': test_preds})
print('outputting to csv')
output.to_csv('submission.csv', index=False)
