# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

 # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import Imputer

data = pd.read_csv('../input/train.csv')
competition_data = pd.read_csv('../input/test.csv')
competition_X = competition_data.drop(['Id'], axis=1)
                                    

data.dropna(axis=0, subset=['SalePrice'], inplace=True)


y = data.SalePrice
X = data.drop(['SalePrice', 'Id'], axis=1) # .select_dtypes(exclude=['object'])
# train_X, test_X, train_y, test_y = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.25)
# low_cardinality_cols = [cname for cname in X.columns if 
#                                X[cname].nunique() < 10 and
#                                X[cname].dtype == "object"]
#numeric_cols = [cname for cname in X.columns if 
#                                X[cname].dtype in ['int64', 'float64']]
#my_cols = low_cardinality_cols + numeric_cols
#X = X[my_cols]
one_hot_encoded_train_X = pd.get_dummies(X)
one_hot_encoded_competition_X = pd.get_dummies(competition_X)

one_hot_encoded_train_X, one_hot_encoded_competition_X = one_hot_encoded_train_X.align(one_hot_encoded_competition_X,
                                                                    join='inner', 
                                                                    axis=1)

# test_X = test_X[my_cols]
train_X, test_X, train_y, test_y = train_test_split(one_hot_encoded_train_X.as_matrix(), y.as_matrix(), test_size=0.1)

# one_hot_encoded_train_X = pd.get_dummies(train_X)
# one_hot_encoded_test_X = pd.get_dummies(test_X)
my_imputer = Imputer()
train_X = my_imputer.fit_transform(train_X)
test_X = my_imputer.transform(test_X)
competition_X = my_imputer.transform(one_hot_encoded_competition_X)
from xgboost import XGBRegressor

my_model = XGBRegressor(n_estimators=1000, learning_rate=0.01)
# Add silent=True to avoid printing out updates with each cycle
my_model.fit(train_X, train_y, early_stopping_rounds=20,
             eval_set=[(test_X, test_y)], verbose=False)

# make predictions
predictions = my_model.predict(test_X)

from sklearn.metrics import mean_absolute_error
print("Mean Absolute Error : " + str(mean_absolute_error(predictions, test_y)))

test_preds = my_model.predict(competition_X)
print(test_preds)

output = pd.DataFrame({'Id': competition_data.Id,
                       'SalePrice': test_preds})
print('outputting to csv')
output.to_csv('submission.csv', index=False)


